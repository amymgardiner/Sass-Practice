// To use Sass file in HTML, you need to compile it to CSS
// to compile into CSS, go to the package.json file and add a new start script
// any changes to a Sass file, will not change the .css file unless it is compiled again
// can add "--watch" to scripts to watch for changes to .scss and then compile for .css automatically, if npm start is also entered into the terminal"


// importing partial
@import "default";


// Variable is a way to store information, that you want to reuse, throughout your stylesheet
// can store things like colors, font size, etc.
// Sass uses the dollar sign to create a variable
$primary-color: lightblue;
$primary-font: sans-serif, 'cursive';

body{
    background: $primary-color;
    font-family: $primary-font;
}


// Example of nesting and pseudo selector
.container{
    width:100%;
    height:100%;
    nav{
        ul{
            li{
                &:nth-child(1){
                    font-size:1em;
                }
                &:nth-child(2){
                    font-size: 2em;
                }
            }
        }
        a{
            text-decoration: none;
        }
    }
}


// Mixins are like a function with JavaScript but with different syntax
// A mixin lets you make a CSS declaration that you want to re-use throughout your site
@mixin transform_Me($prop1, $prop2) {
    width:$prop1;
    height:$prop2;
    background-color: yellow;
    -ms-transform: rotate(20deg) scale(1.5);  /*IE 9*/
    -webkit-transform: rotate(20deg) scale(1.5);  /*Safari 3-8*/
    transform: rotate(20deg) scale(1.5);
}

.transform{
    @include transform_Me(400px, 500px);
    font-size: 3em;
}

.transform-2{
    @include transform_Me(200px, 300px);
}


// example of extend (aka inheritence)
// using extend lets you share a set of CSS properties from one selector to another
%extend-border{
    border: 1px solid #ccc;
    padding: 10px;
    color: #333;
    font-size: 1em;
}

// Sass won't make any code that you can see in the style.css unless you use this in a class
%extend-new{
    margin:20px;
    color: #eee;
}

.border{
    @extend %extend-border;
}

.border1{
    @extend %extend-border;
    margin: 20px;
}


// pseudo selector - a pseudo class is used to define a special state of an element (like hover)
.element{
    a{
        text-decoration: none;
        color: black;
        &:hover{
            color: white;
        }
    }
}


// operators are the key features of programming
// operators are helpful for scaling the web component
// doing math in CSS is very helpful and Sass has some standard math operators
.header{
    // addition (has to be same units or no unit at all on the right side value)
    font-size: 4px + 2;

    // subtraction (has to be same units or no unit at all on the right side value)
    height: 80% - 5%;
}

// multiplication (only one value should have unit)
.multi{
    width: 20% * 5;

    // division (values shoud be in brackets)
    height: (24px / 4);
}

P{
    &:before{
        content: "I am a string with" + quote;
        font-family: cursive + "serif";
    }
}